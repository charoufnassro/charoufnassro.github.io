{"version":3,"sources":["Card.js","CardList.js","robots.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","ColorList","RandomColor","CardList","R","map","info","src_Card","key","robots","username","SearchBox","searchfield","SearchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","e","setState","target","value","state","_this2","filterRobots","filter","robot","toLowerCase","includes","src_SearchBox","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56d671f5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({id, name, email}) => {\r\n    const RandomColor = (id) => {\r\n        const ColorList = [\"light-blue\", \"light-gray\", \"light-green\", \"light-pink\", \"light-purple\", \"light-red\", \"light-silver\", \"light-yellow\", \"lightest-blue\"]\r\n            return ( id > 8 ) ? ColorList[id - 8] : ColorList[id]\r\n        \r\n    }\r\n    return (\r\n        <div className=\"mw5 dib bg-black-05 br3 pa3 ml2   pa3-ns mv3 ba b--black-10 grow\">\r\n            <div className=\"tc\">\r\n                <img src={`https://robohash.org/${id}`} alt=\"avatar\" className={`br-100 h4 w4 dib ba b--black-05 bg-${RandomColor(id)} pa2`} />\r\n                <h2 className=\"f5 mb2 white-80\">\r\n                    {name}\r\n                </h2>\r\n                <p className=\"f7 light-blue mb0 fw6 \">\r\n                    {email}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({R}) =>{\r\n    const List = R.map( info => {\r\n            return <Card key={info.id} id={info.id} name={info.name} email={info.email}/>\r\n        })\r\n    return(\r\n        List\r\n    )\r\n}\r\n\r\nexport default CardList","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];","import React from 'react'\r\n\r\nconst SearchBox = ( {searchfield, SearchChange} ) => {\r\n    return (\r\n        <div className=\"bg-black-05 \">\r\n            <input \r\n            type=\"search\" \r\n            placeholder=\"Search Robot\" \r\n            className=\"tc br3 black-50 fw9 b--none  pa2 ma2 dib\"\r\n            onChange={SearchChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React, {Component} from 'react'\r\nimport CardList from './CardList'\r\nimport {robots} from './robots'\r\nimport SearchBox from './SearchBox'\r\n\r\nclass App extends Component {\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange = (e) => {\r\n        this.setState({ searchfield: e.target.value})\r\n        \r\n    }\r\n    render(){\r\n        const filterRobots = this.state.robots.filter(\r\n            robot =>{\r\n                return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n            }\r\n        )\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1 className=\"bg-black-05 pa3 ma0 light-green\">RobotFriends</h1>\r\n                <SearchBox SearchChange={this.onSearchChange}/>\r\n                <CardList R={filterRobots}/>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\n\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}